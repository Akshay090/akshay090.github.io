{"data":{"allMdx":{"edges":[{"node":{"id":"f64d24d9-b1a6-5aab-8d94-d6e27abe9cab","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pinned\": true,\n  \"title\": \"End to End Deep Learning Tutorial using Azure\",\n  \"tags\": [\"fastai\", \"azure\", \"deeplearning\", \"image-classifier\"],\n  \"date\": \"2020-12-20T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598772791/Portfolio_Assets/deeplearningAzure.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Vimeo = makeShortcode(\"Vimeo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Learn how to set up your deep learning workspace, build a custom dataset, train and deploy model with continuous deployment using azure pipelines.\"), mdx(\"h3\", null, \"Introduction:\"), mdx(\"p\", null, \"The goal of this article is to set up a deep learning workspace on azure, build and deploy end to end deep learning projects on azure. We will start by building a custom image data set to deploy the model in production. This article is a part of the MSP Developer Stories initiative by the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://studentpartners.microsoft.com\"\n  }), \"Microsoft Student Partners\"), \" (India) program.\"), mdx(\"h3\", null, \"What will be we\\u2019ll be building?\"), mdx(\"p\", null, \"We will build a Pokemon image classifier to classify the awesome starters Pikachu, Charmander, Squirtle, and Bulbasaur.\"), mdx(\"p\", null, \"Live Demo at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mini-pokedex.azurewebsites.net/\"\n  }), \"mini-pokedex.azurewebsites.net\")), mdx(Vimeo, {\n    vimeoId: \"448258671\",\n    mdxType: \"Vimeo\"\n  }), mdx(\"h3\", null, \"The steps we will follow:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build custom image dataset using Bing image search API\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Set up our deep learning workspace using azure Data Science VM\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build and train model in Azure Data Science VM using fast AI.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build a web app to use our model through API and dockerizing it.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Push Docker image of a web app to azure container registry.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deploying web app in Linux container VM from an azure container registry.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Setting up continuous deployment using azure pipelines.\"))), mdx(\"h3\", null, \"Note:\"), mdx(\"p\", null, \"Before you start out, make sure you have an account on Azure with an active subscription. If you are a student in STEM, you may use the\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://azure.microsoft.com/en-in/free/students/\"\n  }), \" Azure for Student\"), \"s to get a subscription for free or else you can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://azure.microsoft.com/en-in/free/\"\n  }), \"Azure free account\"), \".\"), mdx(\"h3\", null, \"Step 1: Building custom image dataset using Bing image search api\"), mdx(\"p\", null, \"We will use the Bing Image Search API, go to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://azure.microsoft.com/en-in/services/cognitive-services/bing-image-search-api/\"\n  }), \"Bing Image Search API page\"), \" and click on Try Bing Image Search and sign in. Then activate your service by filling out the required fields like this:\"), mdx(\"p\", null, \"Give it a name, I named it \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"dataset-search-API\")), \", you can try anything different based on its availability. Choose your appropriate subscription. For the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"pricing tier, F1\")), \" will be appropriate as it provides 1,000 transactions free per month. Create a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"resource group Search-API\")), \", you can name it anything, but an important point to keep in mind when working in Azure is to give appropriate names to a resource group, as you would later be using the resource group name to keep track of expenses and delete resources. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Select a location\")), \" for the resource group, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"accepting the terms\")), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"hit create\")), \". Then \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"wait \")), \"for your resource to be created. Once it\\u2019s created \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"click go-to resource\")), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2694/1*JKZ2BY-vFiD32FiVy1yMOw.png\",\n    \"alt\": \"Creating a bing image search resource\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Creating a bing image search resource\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You would find the API key for your bing image search resource page.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then git clone this repo: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/image-dataset-bing-api\"\n  }), \"image-dataset-bing-API\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"open it in VS Code and create a new file named .env and paste contents of file \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/image-dataset-bing-api/blob/master/.env.example\"\n  }), \".env.example\"), \" into it.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then copy your bing image search API key from your resource page and paste it in the .env file at the appropriate place.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a virtual environment with: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"python -m venv venv\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Activate it using : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"venv\\\\Scripts\\\\activate.bat\")), \" (in windows) or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"source venv/bin/activate\")), \" (in Linux)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install dependencies using: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"pip install -r requirements.txt\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"User the script like python search_bing_api.py \\u2014 query \\u201CBulbasaur\\u201D\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Repeat the above process for Pikachu, Charmander, Squirtle.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now you have a folder called dataset with folders with images of each pokemon.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Just go through the images and delete the ones with you feel are not relevant.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add the folder (dataset) to a new git repo as I did here \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/pokemon-image-dataset\"\n  }), \"pokemon-image-dataset\")))), mdx(\"p\", null, \"Now you have a repo in GitHub with custom image Lets start with the next step:\"), mdx(\"h3\", null, \"Step 2: Set up our deep learning workspace using azure Data Science VM\"), mdx(\"p\", null, \"We will set up an NC6 Promo which is a Linux VM with 1 x K80 NVIDIA GPU (1/2 Physical Card) which is 12 GB GPU and six CPU cores.\"), mdx(\"p\", null, \"You can learn more about the VM \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"If you need a detailed installation procedure you can refer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://course.fast.ai/start_azure.html\"\n  }), \"fast ai azure page\"), \" else you can follow below instructions.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We will use the template created by the fast ai team to set up the VM: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://aka.ms/dsvm/fastai\"\n  }), \"Click this link\"), \" to take you to the VM creation page.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"new resource group\"), \" named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DSVM\"), \", set the location as your preference.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"setup \"), \"admin \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"username\"), \"(make lowercase or Jupyter Hub login will fail with 500 Internal Server Error), and set \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"password\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Set appropriate VM name, I named it \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"DSVM-DL\")), \" and select NC6 Promo in VM size\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Select accept terms and click purchase.\"))), mdx(\"p\", null, \"Now wait until the resource is created. Click the notification icon to know if it\\u2019s created and click go to resource group when it\\u2019s created.\"), mdx(\"p\", null, \"In the resource, group page click on the Virtual Machine with the name you gave it above. And click your public IP as in the image below\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2732/1*vDRc82M04qGkVmEMer9Mgg.png\",\n    \"alt\": \"click-the-ip-to-set-it-to-static\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"click-the-ip-to-set-it-to-static\")), mdx(\"p\", null, \"Clicking the IP will take you to a Configuration for your public IP, now change the assignment to Static from dynamic, and you can also set a DNS name label.Due to this step, your VM IP will not change after the restart. The page will look like below image\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2732/1*ZbAaq1gmUXHvvU6axQbOkA.png\",\n    \"alt\": \"set static IP\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"set static IP\")), mdx(\"p\", null, \"Now we have completed setting up the DSVM, let's move to next step\"), mdx(\"h3\", null, \"Step 3: Build and train model in Azure Data Science VM using fast AI.\"), mdx(\"p\", null, \"As you have set up a DSVM with GPU you can \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"either\"), \" with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"azure notebooks\"), \" OR \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"use by ssh into it DSVM and use\"), \". I recommend the second method as it gives you more flexibility. First, let me show you the azure notebooks method and then we will start using the VM with SSH.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Using Azure DSVM with azure notebooks.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://notebooks.azure.com/\"\n  }), \"notebooks.azure.com\"), \", sign in and create a user id.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then click My Notebooks and Create a New Notebook.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now to use your VM with GPU in an azure notebook, change the option Run on Free Compute to Run on Direct Compute.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Now you can begin using the azure notebook on DSVM with GPU.\"))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2512/1*vbpCMRxDQbuYJHil5i9ROw.png\",\n    \"alt\": \"The screen on the change compute step\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"The screen on the change compute step\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SSH into the DSVM to use from there\")), mdx(\"p\", null, \"This method gives you more flexibility than the above one. For \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"windows users,\"), \" I recommend \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using wsl\"), \" before this step, just \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"type wsl into the current shell\"), \" to start it.\"), mdx(\"p\", null, \"To connect to your VM use :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh <username>@<VM Public IP> and enter password\\n\")), mdx(\"p\", null, \"Setup Jupyter Notebook and start Jupyter with the commands below\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"jupyter notebook password\\n    // Enter password:\\n    // Verify password:\\n\\n    jupyter notebook --port 8888\\n\")), mdx(\"p\", null, \"Create a ssh tunnel to localhost:9999 from VM\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh -L 9999:127.0.0.1:8888 <username>@<VM Public IP>\\n\")), mdx(\"p\", null, \"Now go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:9999/\"\n  }), \"localhost:9999\"), \" to use jupyter notebook, enter a password to start using it.\"), mdx(\"p\", null, \"You can create a folder and make a notebook called pokedex-dl and start working on it.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note: \"), \"Please refer to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/Pokedex-DL/blob/master/pokedex.ipynb\"\n  }), \"pokedex.ipynb\"), \" to train and export your model to the outputs folder. I\\u2019m have explained every step in the notebook if you have any queries regarding it comment below.\"), mdx(\"p\", null, \"After following \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/Pokedex-DL/blob/master/pokedex.ipynb\"\n  }), \"pokedex.ipynb\"), \" you would have a outputs folder with the model named poke\", \"*\", \"predictor\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"resnet34, download this from the Jupyter notebook. \", \"*\", \"*\", \"_\", \"Upload the model to dropbox\", mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"*\", \" and \"), \"_\", \"get the sharable link\"), \"*\", \"*\", \".\"), mdx(\"h3\", null, \"Step 4: Build a web app to use our model through API and dockerizing it.\"), mdx(\"p\", null, \"First git clone : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/pokedex-deploy\"\n  }), \"pokedex-deploy\"), \" locally. Replace the dropbox link in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/pokedex-deploy/blob/master/app/server.py\"\n  }), \"server.py\"), \" with your sharable link. You should also change \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/pokedex-deploy/blob/master/app/view/index.html\"\n  }), \"index.html\"), \" as per your preference.\"), mdx(\"p\", null, \"You can run \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/pokedex-deploy\"\n  }), \"pokedex-deploy\"), \" in docker with\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker build -t poke-image . && docker run --rm -it -p 5000:5000 poke-image\\n\")), mdx(\"p\", null, \"You can also replace poke-imagewith a image name you like.\"), mdx(\"p\", null, \"Now as we have our docker image ready we can move to next step\"), mdx(\"h3\", null, \"Step 5: Push Docker image of web app to azure container registry.\"), mdx(\"p\", null, \"First we need to setup azure CLI, please refer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest\"\n  }), \"docs.microsoft.com/en-us/cli/azure/install-azure\"), \" for it. Tip for Windows users:- Try \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://chocolatey.org/\"\n  }), \"Chocolatey\"), \" you can refer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://chocolatey.org/packages/azure-cli\"\n  }), \"chocolatey.org/packages/azure-cli\"), \" for installation.\"), mdx(\"p\", null, \"Don\\u2019t forget az login\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Now we will create a private container registry using Azure CLI\")), \". Container registry is basically a GitHub for docker images, docker hub is a public container registry.\"), mdx(\"p\", null, \"If you need more details of below steps please refer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-azure-cli\"\n  }), \"container-registry-get-started-azure-CLI\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# create a resource group named container_registry_rg\\naz group create - name container_registry_rg - location eastus\\n\\n# create container registry named pokeRegistry\\naz acr create --resource-group container_registry_rg --name pokeRegistry --sku Basic\\n\\n# Login to your container registry\\naz acr login --name pokeregistry\\n\\n# tag your container registry in following format,\\ndocker tag poke-image pokeregistry.azurecr.io/poke-image:v1\\n\\n# Push image to container registry, it will take a while\\ndocker push pokeregistry.azurecr.io/poke-image:v1\\n\\n# You can verify if it's uploaded by\\naz acr repository list --name pokeregistry --output table\\n\\n# Important Please don't forget this,important for deployment\\naz acr update -n pokeregistry --admin-enabled true\\n\")), mdx(\"h3\", null, \"Step 6: Deploying web app in Linux container VM from an azure container registry.\"), mdx(\"p\", null, \"Go to Azure at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://portal.azure.com/\"\n  }), \"portal.azure.com\"), \". and choose to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Create a resource\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web\"), \", then choose \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web App for Containers \"), \"or you can directly \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://portal.azure.com/#blade/Microsoft_Azure_Marketplace/MarketplaceOffersBlade/selectedMenuItemId/home/searchQuery/Web%20App%20for%20Containers\"\n  }), \"click this link to go there.\")), mdx(\"p\", null, \"Hit create and in the page fill the details and create a new resource group. Please \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"change the\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Sku and size\"), \" default option: B1 Basic \"), \"in Dev/Test as it will be enough for basic needs. Don\\u2019t forget to set the image source as Azure Container Registry in the Docker tab.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2732/1*9aU5ZWEilccTHRo2FbWTkQ.gif\",\n    \"alt\": \"Deploying with Web App for containers\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Deploying with Web App for containers\")), mdx(\"p\", null, \"Once it\\u2019s completed click on goto resource and you can find your web app URL at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"URL\")), mdx(\"p\", null, \"Congrats now you have deployed your Deep Learning model \\uD83D\\uDE80\"), mdx(\"h3\", null, \"Step 7: Setting up continuous deployment using azure pipelines.\"), mdx(\"p\", null, \"Now on your web app page in azure, you will find a thing called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Deployment Center, \"), \"this is one of the coolest things in azure. It will help us in creating a CI/CD pipeline in Azure.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Click deployment center\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Select Source code location (Github) and Authorize it\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Select your repository\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It will automatically detect the docker file, just click next\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create Azure DevOps organization and select use Existing in container registry, Click Done\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Click release pipeline in after it\\u2019s the finished page\"))), mdx(\"p\", null, \"Above steps can be seen in the gif below:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/2732/1*nz18C1nlhCiWwovJnIzgEw.gif\",\n    \"alt\": \"deployment center azure\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"deployment center azure\")), mdx(\"p\", null, \"Now you must be in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.azure.com\"\n  }), \"dev.azure.com\"), \" if not go to it and find your project inside your organization in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.azure.com\"\n  }), \"dev.azure.com\"), \".\"), mdx(\"p\", null, \"With the current set up we already have a CI/CD pipeline set up for our project, thanks to Deployment Center.\"), mdx(\"p\", null, \"If you make any changes to your code and push it to GitHub it will build a new image, add it to your container registry and deploy.\"), mdx(\"p\", null, \"But we have two problems to address now\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"just think that you keep making changes to your code and push it, your container registry(10 GB) storage will be used by all those un unused images\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you edit your Readme.md it will build a new image and deploy it.\"))), mdx(\"p\", null, \"To solve both problems go to your project page inside your organization in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.azure.com\"\n  }), \"dev.azure.com\"), \" and follow along with the below video.\"), mdx(Vimeo, {\n    vimeoId: \"448258645\",\n    mdxType: \"Vimeo\"\n  }), mdx(\"p\", null, \"Wow. Congratulations if you reached here \\uD83C\\uDF89. If you have any doubts, post them in the comments section.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Learn how to set up your deep learning workspace, build a custom dataset, train and deploy model with continuous deployment using azure…","timeToRead":6,"wordCount":{"words":1690},"frontmatter":{"title":"End to End Deep Learning Tutorial using Azure","tags":["fastai","azure","deeplearning","image-classifier"],"date":"2020-12-20T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":true,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598772791/Portfolio_Assets/deeplearningAzure.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/deeplearning-tutorial-azure/","owner":"source","parent":"posts"}}},{"node":{"id":"0c995125-d7f2-5de0-81dc-5f802d129bb0","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"pinned\": true,\n  \"title\": \"all-front-matter\",\n  \"tags\": [\"tag1\", \"tag2\"],\n  \"date\": \"2020-12-20T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"featuredImageUrl\": \"https://urlto.image\",\n  \"isPrivate\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"BLOG CONTENT\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"BLOG CONTENT","timeToRead":1,"wordCount":{"words":2},"frontmatter":{"title":"all-front-matter","tags":["tag1","tag2"],"date":"2020-12-20T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":true,"url":null,"misc":null,"pinned":true,"featuredImage":null,"featuredImageUrl":"https://urlto.image","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/all-frontmatter/","owner":"source","parent":"posts"}}},{"node":{"id":"e8ba4960-e590-5497-80d0-fb5ced10476c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"action-echo\",\n  \"date\": \"2020-08-21T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"Github Action to echo comments\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_12_o4ydzi.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"While working on a GitHub Action project I had to get the commnet text from the issue/pr comments. It was\\nnot too straight forward so I created this project, which replies back with the same comment you have typed.\\nThere is a separate implementation in email branch which retrives the GitHub public email of the comment\\nauthor.\"), mdx(\"p\", null, \"Check out at GitHub: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/action-echo\"\n  }), \"action-echo\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation While working on a GitHub Action project I had to get the commnet text from the issue/pr comments. It was\nnot too straight…","timeToRead":1,"wordCount":{"words":64},"frontmatter":{"title":"action-echo","tags":null,"date":"2020-08-21T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"Github Action to echo comments","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_12_o4ydzi.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/action-echo/","owner":"source","parent":"projects"}}},{"node":{"id":"6df3d277-443c-588e-8054-7d89c884cda8","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"wget-google-drive\",\n  \"date\": \"2020-07-28T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"wget script generator\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_9_myoohr.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"While working on deep learning projects the models I had to work with were hosted on Google Drive, the problem\\nwith it is that its not straightforward to do wget from the sharable url as it's with dropbox. So I made\\nthis utility website \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://wget-google-drive.surge.sh/\"\n  }), \"wget-google-drive.surge.sh\"), \". It converts the\\nGoogle Drive sharable url to wget script.\"), mdx(\"p\", null, \"The website uses \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://thesephist.github.io/blocks.css/\"\n  }), \"blocks css.\")), mdx(\"p\", null, \"Here's the demo video : \"), mdx(\"h2\", null, \"\\uD83C\\uDFA5 Demo\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/Akshay090/wget-google-drive/master/.github/demo.gif\",\n    \"alt\": \"Demo\"\n  }))), mdx(\"p\", null, \"Check it out at GitHub : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/wget-google-drive\"\n  }), \"wget-google-drive\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation While working on deep learning projects the models I had to work with were hosted on Google Drive, the problem \nwith it is that…","timeToRead":1,"wordCount":{"words":73},"frontmatter":{"title":"wget-google-drive","tags":null,"date":"2020-07-28T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"wget script generator","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_9_myoohr.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/wget-google-drive/","owner":"source","parent":"projects"}}},{"node":{"id":"c43941b1-c6a9-5241-8e89-cf6bad61b80f","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Gitify - Interact with Git from browser extension.\",\n  \"tags\": [\"github\", \"extension\", \"extension\", \"react\", \"typescript\", \"golang\"],\n  \"date\": \"2020-07-06T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1597571224/Portfolio_Assets/gitify.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Vimeo = makeShortcode(\"Vimeo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TLDR :\"), \" I build this project called gitify, by which you can interact with Git from browser extension. \"), mdx(\"p\", null, \"Check it out and give it a \\uD83C\\uDF1F if you like it.\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/gitify\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Akshay090/gitify\"))), mdx(\"h2\", null, \"\\uD83C\\uDFA5 Demo\"), mdx(Vimeo, {\n    vimeoId: \"435355152\",\n    mdxType: \"Vimeo\"\n  }), mdx(\"p\", null, \"Few months back I had discussed this idea of a browser extension with my friends from which I could clone and open a GitHub repository in VsCode instantly, as I like to check out projects form GitHub and it would be cool to interact with Git from browser.\"), mdx(\"p\", null, \"Then after procrastination for months I decided to work on this, coincidentally there was also an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/gitify\"\n  }), \"online hackathon\"), \" that weekend by MLH. Trust me if it wasn't for the hackathon I doubt if I would have ever started this project. That feeling to make a MVP in limited time is truly something. \"), mdx(\"p\", null, \"I started out by listing the basic features I needed to implement : Git Clone, Open in VsCode. Hmm.. why not add Git Push and Pull, this covers most of the Git commands I use.\"), mdx(\"p\", null, \"A browser extension alone can't communicate with Git, I also had to implement a server, this would run on the user system.\"), mdx(\"h2\", null, \"Building Browser Extension\"), mdx(\"p\", null, \"The GitHub UI has changed recently. So I decided to not to go with the approach of injecting buttons into page and keep everything in browser extension Popup.\"), mdx(\"p\", null, \"I decided to go with this starter repo : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/abhijithvijayan/web-extension-starter\"\n  }), \"web-extension-starter\"), \", this is a really good starter project for building cross browser extension. I starter working with the react-typescript setup in it.\"), mdx(\"p\", null, \"I was fairly new to both TypeScript and React Hooks, working with them was a really good learning experience. TypeScript can be annoying but trust me it's really worth it.\"), mdx(\"p\", null, \"The most helpful and annoying tool was eslint. If it wasn't for eslint my Hooks code would have looked completely different. In the begining I would frequently use\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"// eslint-disable-next-line react-hooks/exhaustive-deps \"), \" \"), mdx(\"p\", null, \"I took some time to understand React Hooks, read this article by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://overreacted.io/a-complete-guide-to-useeffect/\"\n  }), \"Dan Abramov\"), \", tried to solve the bugs where the Effect would fire multiple times and finally managed to work without using the exhaustive-deps. \"), mdx(\"p\", null, \"React Hooks are really easy to understand but difficult to master. They feel like black magic sometimes. I had to use this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/gitify/blob/fd3285391da652b5ad1ebaa1d05fa0986cef29f0/source/utils/index.ts#L95\"\n  }), \"useEffectDebugger\"), \" to figure out some bugs.\"), mdx(\"h2\", null, \"Building the Server\"), mdx(\"p\", null, \"Recently I started learning Golang, totally on a whim as I saw it on Coursera. I made some notes on it too, you can \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/golang-notes\"\n  }), \"find it here\"), \". \"), mdx(\"p\", null, \"So as you have guessed, I decided to write the server in Golang, as Golang generates binary it would be easy to distribute and install. \"), mdx(\"p\", null, \"I used this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/enricofoltran/simple-go-server\"\n  }), \"simple-go-server\"), \" as a starter. Initially I used to perform the git operation using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/go-git/go-git\"\n  }), \"go-git\"), \" which is A Git implementation in pure Go, but later on I switched to os/exec.\"), mdx(\"p\", null, \"To make it easy to use for others I had to convert this server code to something which can run in background so that it won't be too annoying. I came accross this project : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kardianos/service\"\n  }), \"kardianos/service\"), \". I tried out the example code and it worked perfectly in my system, but apparently I didn't know how to convert my server code to a system service, as there were no proper blog post on how to use it, with windows in particular.While researching I made \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/Akshay090/d4f2e0f91a99b516d9d638a1e1a60a0d\"\n  }), \"this gist\"), \" of projects which use kardianos/service. \"), mdx(\"p\", null, \"I decided to switch to other options, like system tray.\\nTo implement the System tray I choose \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cratonica/trayhost\"\n  }), \"trayhost\"), \", as I found it comparatively faster than the alternative \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/getlantern/systray\"\n  }), \"systray\"), \". Then I added an icon to the generated exe by refering \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitlab.com/gozoo/rc-demo\"\n  }), \"this repo\"), \".\"), mdx(\"p\", null, \"I used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gopherize.me/\"\n  }), \"gopherize.me\"), \" to generate the logo/icon, you should definitely check it out.\"), mdx(\"h2\", null, \"Releasing with GitHub actions.\"), mdx(\"p\", null, \"I used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/anton-yurchenko/git-release\"\n  }), \"anton-yurchenko/git-release\"), \" to Publish a GitHub Release, it publishes assets and works along with a Changelog.md file making the relases descriptive.\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/gitifyServer\"\n  }), \"gitifyServer\"), \" runs the GitHub action in a windows runner and the one in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/gitify\"\n  }), \"gitify\"), \" repo runs in ubuntu runner.\"), mdx(\"p\", null, \"This project was really fun to build, it currently works on windows only as I don't have either mac or linux to test on them. If you would like to add support it would be really appreciated.  \"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"TLDR :  I build this project called gitify, by which you can interact with Git from browser extension.  Check it out and give it a 🌟 if you…","timeToRead":3,"wordCount":{"words":685},"frontmatter":{"title":"Gitify - Interact with Git from browser extension.","tags":["github","extension","extension","react","typescript","golang"],"date":"2020-07-06T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1597571224/Portfolio_Assets/gitify.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/gitify/","owner":"source","parent":"posts"}}},{"node":{"id":"96bc97cc-55a3-5729-b689-ff83d01fc303","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"svg-banners\",\n  \"date\": \"2020-06-23T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"Dynamic SVG's for GitHub Readme\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_11_zepzym.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"When I came accross this repo \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sindresorhus/css-in-readme-like-wat\"\n  }), \"css-in-readme-like-wat\"), \", I got\\nthis idea that this could be used to make really cool GitHub Readme's, so I made a collection of similar\\nsvg's with help of projects from codepen. After that I converted all the svg's to be generated dynamically from\\napi with Vercel, inspired from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/anuraghazra/github-readme-stats\"\n  }), \"github-readme-stats\"), \".\"), mdx(\"p\", null, \"Check it out at GitHub : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/svg-banners\"\n  }), \"svg-banners\")), mdx(\"p\", null, \"This is my project with most number of stars \\uD83C\\uDF1F.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation When I came accross this repo  css-in-readme-like-wat , I got \nthis idea that this could be used to make really cool GitHub…","timeToRead":1,"wordCount":{"words":70},"frontmatter":{"title":"svg-banners","tags":null,"date":"2020-06-23T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"Dynamic SVG's for GitHub Readme","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_11_zepzym.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/svg-banners/","owner":"source","parent":"projects"}}},{"node":{"id":"e18960fd-6153-520b-9877-9ffccd37f09d","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"gitify\",\n  \"date\": \"2020-06-14T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"Git from browser extension\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_10_thepjr.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Vimeo = makeShortcode(\"Vimeo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"After finishing the Coursera Golang Specialization I decided to use golang for building a sideproject to\\nlearn more about it. I had this idea of building a chrome extension from which we can perform the frequent\\ngit operations like commit, push and pull, after all that's what most of us need for basic use case.\"), mdx(\"p\", null, \"I build the chrome extension using React/TypeScript and hooks. It was a really good learning experience.\\nThe chrome extension would communicate with the golang server, which runs in the taskbar (i was using\\nwindows back then). Its currently works on  window only, as I didn't found any good library to run golang\\nserver in a cross platform way as in the dock, taskbar, etc.\"), mdx(\"p\", null, \"Here's the demo video : \"), mdx(\"h2\", null, \"\\uD83C\\uDFA5 Demo\"), mdx(Vimeo, {\n    vimeoId: \"435355152\",\n    mdxType: \"Vimeo\"\n  }), mdx(\"p\", null, \"Check it out at GitHub : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/gitify\"\n  }), \"gitify\")), mdx(\"p\", null, \"Detailed blog at : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://akshay-ashok.now.sh/posts/gitify/\"\n  }), \"gitify\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation After finishing the Coursera Golang Specialization I decided to use golang for building a sideproject to \nlearn more about it. I…","timeToRead":1,"wordCount":{"words":136},"frontmatter":{"title":"gitify","tags":null,"date":"2020-06-14T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"Git from browser extension","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_10_thepjr.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/gitify/","owner":"source","parent":"projects"}}},{"node":{"id":"170e7e81-9db3-57c5-b892-711eb472441b","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Golang Notes\",\n  \"tags\": [\"notes\", \"golang\"],\n  \"date\": \"2020-06-05T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"These are the notes I made while doing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.coursera.org/specializations/google-golang\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Coursera Golang Specialization\")), \"\\nfor quick reference.\"), mdx(\"h2\", null, \"Objects in Go\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go does not use the term class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A struct is a collection of data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go uses structs with associated methods.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go uses a simplified object orientation: - no inheritance - no constructors - no generics\")), mdx(\"h2\", null, \"Concurrency\"), mdx(\"p\", null, \"..is the management of multiple tasks that (could theoretically) run at the same time. Concurrent programming enables parallelism:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"management of task execution\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"communication between tasks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"synchronization between tasks\\nGorutines represent concurrent tasks\\nChannels are used to communicate between tasks\\nSelect enables task synchronization\")), mdx(\"h2\", null, \"Pointer\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \".. is an address to data in memory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"& operator returns the address of some data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"operator returns the data at some address\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"var x int = 1           //declaration and initialisation of an int\\nvar y int           //declaration of an int\\nvar ip *int         //declaration of a pointer to an int\\n\\nip = &x                 //setting ip to the address of x > ip now points to x\\ny = *ip             //setting y to the data stored at the address ip > y now is x > y = 1\\n----------------------------------------------------\\nvar ptr *int = new(int) //new() creates a var and returns pointer to that var, therfore *int\\n*ptr = 3\\nfmt.Println(*ptr)       //3\\nfmt.Println(ptr)        //some address\\n\")), mdx(\"h2\", null, \"Variable Scope\"), mdx(\"p\", null, \"A variable is accessible from block Bj if:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the variable is declared in Bi and\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bi >= Bj\")), mdx(\"h2\", null, \"Memory: Stack vs Heap\"), mdx(\"p\", null, \"Stack: variables defined within a function - Memory will be deallocated when function call completed (in C for example)\\nHeap: Global variables - Needs to be explicitly deallocated ( in C for example), is fast but error-prone\"), mdx(\"h2\", null, \"Type conversion\"), mdx(\"p\", null, \"Use T() to convert, where T stands for the type you want to convert into\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"var x int32 = 1\\nvar x int16 = 2\\nx = y //error\\nx = int32(y)\\n\")), mdx(\"h2\", null, \"ASCII\"), mdx(\"p\", null, \"Each char is associated with an 8-bit number.\\n8 bits \\u2014> 0-255, not enough for different alphabets and symbols\"), mdx(\"h2\", null, \"Unicode\"), mdx(\"p\", null, \"Each char is associated with an 32-bit number.\\nUnicode is variable in length. From 8-bits to 32-bits.\\n8-bit UTF codes are the same as ASCII\"), mdx(\"h2\", null, \"Strings\"), mdx(\"p\", null, \"\\u2014 a sequence of bytes, each byte is a \\u201Crune\\u201D (Go specific, = UTF-8 code point)\\nGood packages: Unicode (for individual runes), String (for strings)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"var hello = \\\"hello\\\"\\nvar test = hello[0]\\nfmt.Println(test) //104\\nfmt.Println(string(test)) //h\\n\")), mdx(\"h2\", null, \"Switch/case statement\"), mdx(\"p\", null, \"If x is 1, enter case 1, if x is 2, enter case 2\\u2026\\u2026..\\nCompared to C, no break statements are needed. Go will not fall through, it automatically breaks.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"switch x {\\ncase 1:\\n    fmt.printf(\\\"case 1\\\")\\ncase 1:\\n    fmt.printf(\\\"case 2\\\")\\ndefault:\\n    fmt.printf(\\\"default case\\\")\\n\")), mdx(\"h2\", null, \"Exported names\"), mdx(\"p\", null, \"When importing a package, you can refer only to its exported names. Any \\\"unexported\\\" names are not accessible from outside the package. A name is exported if it begins with a capital letter.\"), mdx(\"h2\", null, \"Variables\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"var i, j int = 1, 2\\nvar i, j = 1, 2 //int not needed, var will take the type of the initialiser\\n\\nvar c, python, java = true, false, \\\"no!\\\"\\n\")), mdx(\"h2\", null, \"Short variable declarations (only within functions)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func main() {\\n    var i, j int = 1, 2\\n    k := 3                      //within fucntions we can omit the var keyword and use :=\\n    c, python, java := true, false, \\\"no!\\\"\\n\\n    fmt.Println(i, j, k, c, python, java)\\n}\\n\")), mdx(\"h2\", null, \"Functions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Functions are first class - \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"allows functions to be assigned to variables, passed as arguments to other functions and returned from other functions.\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func add(x, y int) int {\\n    return x + y\\n} //adds x and y, returns integer\\n\")), mdx(\"h3\", null, \"Function with multiple results\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func swap(x, y string) (string, string) {\\n    return y, x\\n} // parameter x and y get swapped, two strings get returned\\n\\n\")), mdx(\"h3\", null, \"Named return values\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func split(sum int) (x, y int) {\\n    x = sum * 4 / 9\\n    y = sum - x\\n    return\\n} //a return statement without arguments, returns the named return values, here (x, y int)\\n\")), mdx(\"h3\", null, \"Variables as Functions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Declare a variable as func\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"var funcVar func(int) int\\nfunc incFn(x int) int {\\n    return x + 1\\n}\\nfunc main() {\\n    funcVar = incFn // function on RHS without ()\\n    fmt.Print(funcVar(1))\\n}\\n\")))), mdx(\"h3\", null, \"Functions as Arguments\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Functions can be passes to another functions as arguments\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func applyIt(afunct func (int) int,\\n             val int) int {\\n    return afunct(val)\\n}\\nfunc incFn(x int) int {\\n    return x + 1\\n}\\nfunc main() {\\n    fmt.Print(applyIt(incFn, 2))\\n}\\n\")), mdx(\"h3\", null, \"Anonymous Functions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Don't need to name a function\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func applyIt(afunct func (int) int,\\n             val int) int {\\n    return afunct(val)\\n}\\n\\nfunc main() {\\n    v := applyIt(func (x int) int{return x + 1}, 2)\\n    fmt.Print(v)\\n}\\n\")))), mdx(\"h3\", null, \"Returning Functions and Closures\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Go supports anonymous functions, which can form closures\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc intSeq() func() int {\\n    i := 0\\n    return func() int { // returns anonymous func\\n        i++             // it closes over variable i\\n        return i        // to form closure\\n    }\\n}\\n\\nfunc main() {\\n    nextInt := intSeq() // function value captures its own i value,\\n                        //which will be updated each time we call nextInt\\n\\n    fmt.Println(nextInt())\\n    fmt.Println(nextInt())\\n    fmt.Println(nextInt())\\n\\n    newInts := intSeq()\\n    fmt.Println(newInts())\\n}\\n\")))), mdx(\"h3\", null, \"Variadic and Deferred Functions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Variadic means function can take any number of arguments\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Variable Argument Number\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Functions can take a variable no. of arguments\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Uses ellipses \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"... \"), \"to specify\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Treated as a slice inside function\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func getMax(vals, ...int) int {\\n    maxV := -1\\n    for _, v := range vals {\\n        if v > maxV {\\n            maxV = V\\n        }\\n    }\\n    return maxV\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Variadic Slice Argument\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"can pass slice to a variadic function\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Need the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"...\"), \" suffix\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func main() {\\n    fmt.Println(getMax(1,3,6,4))\\n    vslice := []int{1,3,6,4}\\n    fmt.Println(getMax(vslice...))\\n}\\n\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Deferred Function Calls\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Call can be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"deferred\"), \" until the surrounding function completes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Typically used for clean up activities\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func main() {\\n    i := 1\\n    defer fmt.Println(i+1)\\n    i++\\n    fmt.Println(\\\"Hello\\\")\\n}\\n\")))))))))), mdx(\"h2\", null, \"Arrays\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fixed length in Go\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Elements are accessed via \", \"[ ]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Index starts at 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Elements initialized to zero value by default\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"var x [5]int         //declares array with 5 zeros of int type\\nx[0] = 2\\n________________________\\n//Array literals - An array pre-defined with values\\nvar x [5] int = [5]{1,2,3,4,5}\\nx := [...]{1,2,3,4}                     //... is subsituted with  the length of the literal\\n___________________________\\n//Iterating through arry\\nfor i, v range x {\\n    fmt.Printf(\\\"index %d, value %d\\\", i, v)\\n//range returns two values, the current index and the value at the index\\n\")), mdx(\"h2\", null, \"Slices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A window on an underlying array, contain a pointer to array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pointer\"), \" indicates the start of the array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"length\"), \" is the number of elements in the array\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"length of each slice is difference between it's declared indices\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"capacity\"), \" is the max number of elements (from start of slice to end of array)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"capacities are difference between \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"length of underlying array\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"starting index of slice\"), \".\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"array := [...]int{1,2,3,4,5}\\nslice1 := array[1:3]                //2,3\\nslice2 := array[2:5]                //3,4,5\\nfmt.Printf(cap(slice2))             // 3, because starting from index 2, the slice can have 3 elements                                      at most\\n\")), mdx(\"p\", null, \"Length and Capacity\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"len()\"), \" function returns length\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"cap()\"), \" function returns capacity\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"a1 := [3]string{\\\"a\\\",\\\"b\\\",\\\"c\\\"}\\nsli1 := a1[0:1]\\nfmt.Printf(len(sli1),cap(sli1)) // 1 3\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"changing a slice changes the underlying array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"overlapping arrays refer to the same elements, changing it in one slice, also changes it for the other element\")), mdx(\"h2\", null, \"Slice literal\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"creates the underlying array and then the slice that refers to it\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"that means the slice and the array are the same.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"slice points to the start of the array, length equal to capacity\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"//Sliche literal\\nsli := []{1,2,3}            //slices don't need ... in the [ ]\\n\")), mdx(\"h2\", null, \"Variable slices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"you can also create a slice by using make()\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"make either takes two to three arguments:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Two: type and length\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sli = make([]int, 10)\"), \" // then length and capacity are equal\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Three arguments : : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"type, length and capacity\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sli = make([]int, 10,15)\"), \" // underlying array len 15 and slice len 10\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Append()\"), \" lets you append elements. If there is space left in the underlying array, it will use that until it is full. Once full and you keep appending, it copies the content and creates a new, bigger underlying array\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \" sli = make([]int, 0, 3) // len of sli is 0\\n sli = append(sli, 100)\\n fmt.Println(len(s), cap(s)) // 1 3\\n\")))), mdx(\"h2\", null, \"Hash table\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains key value pairs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"each value is associated with a unique key\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"hash function is used to compute the slot for the key in the hash table. Input=key, output=slot to put value\")), mdx(\"h3\", null, \"Maps (Go\\u2019s implementation of hash tables)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"var idMap map[string]int // key type string value type int\\nidMap = make(map[string]int)\\n_____________________________\\n//Map literal\\nidMap := map[string]int {\\n    \\\"joe\\\": 23}\\n\\n_____________________________\\n//Accessing maps\\nfmt.Printf(idMap[\\\"joe\\\"])                //prints 23\\n\\n_____________________________\\n//Adding a key value pair\\nidMap[\\\"Jane\\\"] = 34  //no key \\\"Jane\\\" so the key/val pair gets added\\n\\n______________________________\\n//Editing a key value pair\\nidMap[\\\"Jane\\\"] = 98                  //overrides the old key/val pair\\n\\n____________________________\\n//Deleting a key/val pair\\ndelete(idMap, \\\"joe\\\"\\n\\n_____________________________\\n//Two value assignment to test whether key is in map\\nid, b := idMap[\\\"joe\\\"]                   //id=23, b=true, because joe is a key in the map\\n\\n_____________________________\\n//Number of key/val pairs\\nlen(idMap)\\n\\n_____________________________\\n//Iterating through map\\nfor key, val := range idMap {\\n    fmt.Prinf(key, val)\\n}\\n\")), mdx(\"h2\", null, \"Struct\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Aggregate data type\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Groups together objects of arbitrary types\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"type struct Person {\\n    name string\\n    addr string\\n    phone string\\n}\\nvar p1 Person\\np2 := new(Person) //creates new Person struct with all fields initialized to defaults 0 ir \\\"\\\"\\np1 := Person(name: \\\"joe\\\", addr: \\\"a str\\\", phone: \\\"0123\\\")         //struct literal\\np1.name = \\\"joe\\\"\\n\")), mdx(\"h2\", null, \"Blank identifier\"), mdx(\"p\", null, \"If an assignment requires multiple values on the left side, but one of the values will not be used by the program, a blank identifier on the left-hand-side of the assignment avoids the need to create a dummy variable and makes it clear that the value is to be discarded.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"if _, err := os.Stat(path); os.IsNotExist(err) {\\n    fmt.Printf(\\\"%s does not exist\\\\n\\\", path)\\n}\\n\")), mdx(\"h2\", null, \"JSON\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Format to represent structured Data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consists of Attribute-Value pairs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All Unicode\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Types can be combined recursively\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"//Go struct\\ntype struct Person {\\n    name string\\n    addr string\\n    phone string\\n}\\n\\np1 := Person(name: \\\"joh\\\", age:24, phone:\\\"039203\\\")\\n\\n//JSON\\n{\\\"name\\\": \\\"joh\\\", \\\"age\\\":23, \\\"phone\\\":\\\"0320323\\\"}\\n\\n//Marshal creates JSON byte array from Go struct\\nbarr, err := json.Marshal(p1)\\n\\n//Unmarshal converts JSON []byte array into a Go struct\\nvar p2 Person\\nerr := json.Unmarshall(barr, &p2)\\n\\n//the Go struct needs to have the same field names as the JSON object has attributes\\n//if Unmarshal worked, err is nil\\n\")), mdx(\"h2\", null, \"File Access\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic operations: - Open - get handle for access - Read - read bytes into []byte - Write - write []bytes into file - Close - release handle - Seek - move read/write head\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Package \\u201Cio/ioutil\\u201D\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"dat, err := ioutil.ReadFile(\\\"test.txt\\\")\\n// dat is []byte filled with contents of entire file\\n//no open/close needed when using ReadFile\\n//don't use ReadFile with large files\\n\\ndat = \\\"Hello world\\\"\\nerr := ioutul.WriteFile(\\\"outfile.txt\\\", dat, 0777)\\n// writes []byte to file, creates new file, unix style permission\\n\")), mdx(\"h2\", null, \"OS Package\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"os.Open() -returns file descriptor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"os.Close() - close a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"os.Read() - reads from file into []byte, you can control how big []byte is\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"os.Write() - writes []byte into file\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"f, err := os.Open(\\\"test.txt)\\nbarr := make([]byte, 10)\\nnumber, err := f.read(barr)\\nf.close()\\n//fills barr with first 10 bytes from file, calling it the next time it will read the next 10 bytes --> head moves\\n//number = number of bytes read\\n\")), mdx(\"h2\", null, \"Methods\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There are two types of methods :\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Value receivers : Methods that just do calculations on value, receive value is all they can do\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pointer receivers : To change a value in struct we need a pointer receiver. You may want to use a pointer receiver type to avoid copying on method calls or to allow the method to mutate the receiving struct\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No need to de-reference pointer with a \", \"*\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main\\n\\nimport \\\"fmt\\\"\\n\\ntype rect struct {\\n    width, height int\\n}\\n\\nfunc (r rect) GetWidth() int {\\n    return r.width\\n}\\n\\nfunc (r *rect) SetWidth(newWidth int) {\\n   r.width = newWidth // modifies struct\\n}\\n\\nfunc main() {\\n    r := rect{width: 10, height: 5}\\n\\n    fmt.Println(\\\"Width: \\\", r.GetWidth())\\n    r.SetWidth(110)\\n    fmt.Println(\\\"Width: \\\", r.GetWidth())\\n}\\n\")))), mdx(\"h2\", null, \"Encapsulation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A package is the smallest unit of private encap\\xADsulation in Go.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"All identifiers defined within a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://yourbasic.org/golang/packages-explained/\"\n  }), \"package\"), \" are visible throughout that package.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When importing a package you can access only its \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"exported\"), \" identifiers.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"An identifier is exported if it begins with a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"capital letter\"), \".\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"In this package, the only exported identifiers are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StopWatch\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Start\"), \".\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package timer\\n\\nimport \\\"time\\\"\\n\\n// A StopWatch is a simple clock utility.\\n// Its zero value is an idle clock with 0 total time.\\ntype StopWatch struct {\\n    start   time.Time\\n    total   time.Duration\\n    running bool\\n}\\n\\n// Start turns the clock on.\\nfunc (s *StopWatch) Start() {\\n    if !s.running {\\n        s.start = time.Now()\\n        s.running = true\\n    }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StopWatch\"), \" and its exported methods can be imported and used in a different package.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main\\n\\nimport \\\"timer\\\"\\n\\nfunc main() {\\n    clock := new(timer.StopWatch)\\n    clock.Start()\\n    if clock.running { // ILLEGAL\\n        // \\u2026\\n    }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"source: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://yourbasic.org/golang/public-private/\"\n  }), \"yourbasic.org/golang/public-private\")))), mdx(\"h2\", null, \"Interfaces\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Go doesn\\u2019t have inheritance \\u2013 instead composition, embed\\xADding and inter\\xADfaces support code reuse and poly\\xADmorphism\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Interfaces is : Set of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"method signatures\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"name parameters, return value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implementation is NOT defined\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Used to express conceptual similarity between types\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://yourbasic.org/golang/interfaces-explained/\"\n  }), \"interfaces\")), \" take care of polymorphism and dynamic dispatch.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"reference : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gobyexample.com/interfaces\"\n  }), \"https://gobyexample.com/interfaces\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"satisfies an interface\"), \" if type defines all methods specified in the interface.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"same method signatures\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Rectangle\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Triangle\"), \" types satisfy the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Shape2D\"), \" interface\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Must have Area() and Perimeter() methods\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Additional methods are OK\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similar to inheritance and overriding\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"type Shape2D interface {\\n    Area() float64\\n    Perimeter() float64\\n}\\ntype Triangle {...}\\nfunc (t Triangle) Area() float64 {...}\\nfunc (t Triangle) Perimeter() float64 {...}\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Triangle type satisfies the Shape2D interface, no need to state it explicitly.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"These are the notes I made while doing the  Coursera Golang Specialization \nfor quick reference. Objects in Go Go does not use the term…","timeToRead":4,"wordCount":{"words":1126},"frontmatter":{"title":"Golang Notes","tags":["notes","golang"],"date":"2020-06-05T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":null,"embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/golang-notes/","owner":"source","parent":"posts"}}},{"node":{"id":"7b1ac5a8-72cc-57bd-93cd-a64f6e771198","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"bingoset\",\n  \"date\": \"2020-04-27T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"cli tool for image dataset\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598801188/Portfolio_Assets/Projects/Banner/Frame_17_vrltjr.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"When building custom deep learning models collecting images can be a tedious task, so to solve this\\nissue I made this cli tool to quickly create image datasets, it works with Bing Image Search API to\\nfetch images.\"), mdx(\"p\", null, \"It effectively handles edge cases for images when they are corrupted or have invalid source. \"), mdx(\"p\", null, \"Creating the dataset is as easy as \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"bingoset q pikachu\\n\")), mdx(\"p\", null, \"this creates image dataset of pikachu with 250 images.\"), mdx(\"p\", null, \"Check out at GitHub: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/bingoset\"\n  }), \"bingoset\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation When building custom deep learning models collecting images can be a tedious task, so to solve this \nissue I made this cli tool…","timeToRead":1,"wordCount":{"words":75},"frontmatter":{"title":"bingoset","tags":null,"date":"2020-04-27T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"cli tool for image dataset","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598801188/Portfolio_Assets/Projects/Banner/Frame_17_vrltjr.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/bingoset/","owner":"source","parent":"projects"}}},{"node":{"id":"80488529-53c2-58b7-a460-7ab2d05e0224","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"mini-pokedex\",\n  \"date\": \"2020-04-13T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"Tiny Pokemon classifier.\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598799785/Portfolio_Assets/Projects/Banner/Frame_16_pcfm1q.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Vimeo = makeShortcode(\"Vimeo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"Made this project while writing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://akshay-ashok.now.sh/posts/deeplearning-tutorial-azure/\"\n  }), \"MSP Developer Stories blog\"), \".\"), mdx(\"p\", null, \"The classification model is trained on a custom dataset generated with images from bing image search api.\\nTo generate the dataset I used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/bingoset\"\n  }), \"bingoset\"), \", which is a CLI Toolkit\\nto quickly create image dataset using Bing Image Search API.\"), mdx(\"p\", null, \"The Deep learning part is done with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.fast.ai/\"\n  }), \"fast ai\"), \". The backend part is done with starlette,\\nand frontend is made using vanilla js.\"), mdx(\"p\", null, \"I have explained each and every part of building this project in this blog post : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://akshay-ashok.now.sh/posts/deeplearning-tutorial-azure/\"\n  }), \"deeplearning-tutorial-azure\")), mdx(\"p\", null, \"Check out at GitHub: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/pokedex-deploy\"\n  }), \"pokedex-deploy\")), mdx(\"h2\", null, \"\\uD83C\\uDFA5 Demo\"), mdx(Vimeo, {\n    vimeoId: \"448258671\",\n    mdxType: \"Vimeo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation Made this project while writing the  MSP Developer Stories blog . The classification model is trained on a custom dataset…","timeToRead":1,"wordCount":{"words":95},"frontmatter":{"title":"mini-pokedex","tags":null,"date":"2020-04-13T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"Tiny Pokemon classifier.","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598799785/Portfolio_Assets/Projects/Banner/Frame_16_pcfm1q.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/mini-pokedex/","owner":"source","parent":"projects"}}},{"node":{"id":"521ef318-d1a7-5464-a63a-347d693581be","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Here's how I made a CLI tool to work with Google Colab notebooks.\",\n  \"tags\": [\"python\", \"cli\"],\n  \"date\": \"2020-04-09T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1597570344/Portfolio_Assets/colab-cli.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What I built\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/colab-cli\"\n  }), \"colab-cli\"), \" : a cli tool to automate workflow of google colab, create, download or add notebooks to google colab and organize them in google drive from cli.\"), mdx(\"h2\", null, \"How I built it\"), mdx(\"p\", null, \"Hi, I recently started learning deep learning and google colab was my go-to place to try out all those notebooks's. I didn't like the entire UX of opening the projects from GitHub repos, saving to drive and then creating folders in the drive to organize all those notebooks's. \"), mdx(\"p\", null, \"These were not the only problem if I had to commit my current version of the repo I had only one option to save a copy of GitHub, no option for GitLab or other services. \"), mdx(\"p\", null, \"So the solution I came up to solve all those issues is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/colab-cli\"\n  }), \"colab-cli\"), \", with this tool I could easily open any notebook in google colab from my terminal with command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colab-cli open-nb filename.ipynb \"), \". \"), mdx(\"p\", null, \"This tool work by uploading the notebook to google drive with the same file structure as in the local git repo.\"), mdx(\"p\", null, \"When I'm done with my work in google colab I use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colab-cli pull-nb filename.ipynb \"), \" in terminal to get all those changes locally. Now I'm free to git commit it and push it to anywhere.\"), mdx(\"p\", null, \"If I make some changes to the notebooks locally and then again want to get back to colab with the modified file it's as easy as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colab-cli push-nb filename.ipynb \"), \".\"), mdx(\"p\", null, \"And when I'm starting out with a project from scratch, I begin by initializing git repo in it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git init\"), \" as it's necessary. Then I can make a new ipynb by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colab-cli new-nb my_nb.ipynb\"), \". This command creates a new notebook file both locally and in gdrive, also open's it in colab to start working.\"), mdx(\"h2\", null, \"Demo\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://asciinema.org/a/314749?autoplay=1\"\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://asciinema.org/a/314749.svg\",\n    \"alt\": \"demo\"\n  })))), mdx(\"h2\", null, \"Link to Code\"), mdx(\"p\", null, \"The complete project is opensource and you can find it at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/colab-cli\"\n  }), \"https://github.com/Akshay090/colab-cli\"), \"\\nInstructions to get started are in the readme.md\"), mdx(\"h2\", null, \"What's the stack? did I run into issues or discover something new along the way?\"), mdx(\"p\", null, \"It's written in python. I used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://typer.tiangolo.com/\"\n  }), \"Typer\"), \" to make this CLI tool. Typer has really good tutorials and documentation to get started. The part of dealing with google drive API is handled by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pythonhosted.org/PyDrive/quickstart.html\"\n  }), \"PyDrive\"), \". The packaging part is managed easily due to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://python-poetry.org/\"\n  }), \"Poetry\"), \".   \"), mdx(\"p\", null, \"The main time-consuming part was writing this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/colab-cli/blob/master/colab_cli/utilities\"\n  }), \"utilities\"), \" to deal with folder and file creation and deletion. \"), mdx(\"p\", null, \"I also use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitpython.readthedocs.io/en/stable/\"\n  }), \"gitpython\"), \" to get the git root of the current directory, but later I removed it after moving files from it which I needed, as it had various other dependencies, which increased my package installation time.\"), mdx(\"p\", null, \"Some interesting things I learned from this project\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"folders are actually files with some metadata. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To create a new colab notebook from API I had to know the mime type of google colab notebooks, which was apparently not documented anywhere like the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developers.google.com/drive/api/v3/mime-types\"\n  }), \"official google drive API page\"), \" to get this mime type I searched across all the API request that google drive made to find that the mime type of google colab notebooks is: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"application/vnd.google.colaboratory\"), \".\")), mdx(\"p\", null, \"This was a really interesting weekend project. I would really appreciate if you try it and give your feedback or help improve it further. \"), mdx(\"h2\", null, \"Additional Resources/Info\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Typer Tutorial : \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://typer.tiangolo.com/tutorial/\"\n  }), \"https://typer.tiangolo.com/tutorial/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building package with Poetry : \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://typer.tiangolo.com/tutorial/package/\"\n  }), \"https://typer.tiangolo.com/tutorial/package/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Post image source : \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://unsplash.com/photos/4SHxst61_Sg\"\n  }), \"https://unsplash.com/photos/4SHxst61_Sg\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"What I built colab-cli  : a cli tool to automate workflow of google colab, create, download or add notebooks to google colab and organize…","timeToRead":2,"wordCount":{"words":537},"frontmatter":{"title":"Here's how I made a CLI tool to work with Google Colab notebooks.","tags":["python","cli"],"date":"2020-04-09T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1597570344/Portfolio_Assets/colab-cli.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/colab-cli/","owner":"source","parent":"posts"}}},{"node":{"id":"714f6cae-843d-5fa8-a317-f367ddc7abba","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Break the chain - SMS chatbot for awareness in times of COVID-19\",\n  \"tags\": [\"twilio\", \"python\", \"flask\", \"web scraping\"],\n  \"date\": \"2020-04-06T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1597569978/Portfolio_Assets/break-chain.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What I built\"), mdx(\"p\", null, \"Hi, I have built an SMS chatbot using Twilio, which helps the user to track COVID-19 cases across different states of India, get COVID-19 news and answers some questions on COVID-19.\"), mdx(\"p\", null, \"The main idea of this project is to spread awareness regarding COVID-19 to a large number of people. So I decided to use Twilio SMS service for this project as an SMS facility is available to almost all mobile phones, this helps the information to reach people who don't use smartphones or computers.\"), mdx(\"p\", null, \"I named this project break-the-chain as public awareness is one of the major factors in the fight against COVID-19. People should stay alert regarding the disease spread and take precautions like social distancing to stop the spread of COVID-19 aka. break-the-chain of COVID-19.\"), mdx(\"h2\", null, \"Demo\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/Akshay090/break-the-chain/master/demo.gif\",\n    \"alt\": \"Demo Gif\"\n  }))), mdx(\"h2\", null, \"Link to Code\"), mdx(\"p\", null, \"The complete project is opensource and you can find it at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/break-the-chain\"\n  }), \"https://github.com/Akshay090/break-the-chain\"), \"\\nInstructions to run project is in readme.\"), mdx(\"h2\", null, \"How I built it (what's the stack? did I run into issues or discover something new along the way?)\"), mdx(\"p\", null, \"I initially went to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.twilio.com/code-exchange\"\n  }), \"twilio.com/code-exchange\"), \" and searched for the chatbot, it showed me \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.twilio.com/code-exchange/sms-support-chatbot-using-autopilot\"\n  }), \"this project\"), \", I spent an hour with it trying to understand what it does, this project uses autopilot service of Twilio to apply NLP on SMS and calls actions bases on it. It felt too overwhelming for the basic idea I had. I learned a lot about express and pug from it.  \"), mdx(\"p\", null, \"So finally I decided to leave that project aside. I started working with flask as mentioned in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.twilio.com/blog/build-a-sms-chatbot-with-python-flask-and-twilio\"\n  }), \"this blog post\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.twilio.com/blog/build-a-whatsapp-chatbot-with-python-flask-and-twilio\"\n  }), \"also referred this post\"), \" to send and receive messages through WhatsApp, as SMS rates to an international number(bought in Twilio) cost 5 \\u20B9 each. I upgraded the base project as per my requirements.\"), mdx(\"p\", null, \"I looked across various public APIs for COVID-19 and realized I had to do web scraping to get details of COVID-19 cases of each state in India, as I didn't find any suitable working API for it.\"), mdx(\"p\", null, \"The scraping is done on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mohfw.gov.in/\"\n  }), \"https://www.mohfw.gov.in/\"), \" through a flask script and data is stored in SQLite DB. There is also a flask script to get news from newsapi.org and store it in DB. After these two process, the user can interact with the bot from the preferred channel.\"), mdx(\"p\", null, \"The latest addition I made to this project is a library called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://chatterbot.readthedocs.io/en/stable/\"\n  }), \"chatterbot\"), \" it enables the bot to make small talks with a user with just 2 lines of code. This library was mentioned at the end of the second blog post mentioned above, else I would have missed it, \\uD83D\\uDE05 thanks Twilio.\"), mdx(\"p\", null, \"The project is a flask app, it uses:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SQLite database \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sqlAlchemy for dealing with database \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"marshmallow for (de)serialization \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Twilio python library \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"beautifulsoup4 for web scraping\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"newsapi.org python client\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"chatterbot for fallback small talks\")), mdx(\"h2\", null, \"Categories of project\"), mdx(\"p\", null, \"This project falls into two categories\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"COVID-19 Communications: an app to help folks communicate during this challenging time, either to stay connected or to help resolve COVID-19 related challenges.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interesting Integrations: an app that integrates Twilio with at least one other API.\")), mdx(\"h2\", null, \"Additional Resources/Info\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Learn Flask : \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\"\n  }), \"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated responce to user Input : \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://chatterbot.readthedocs.io/en/stable/\"\n  }), \"https://chatterbot.readthedocs.io/en/stable/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.twilio.com/blog/build-a-sms-chatbot-with-python-flask-and-twilio\"\n  }), \"https://www.twilio.com/blog/build-a-sms-chatbot-with-python-flask-and-twilio\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.twilio.com/blog/build-a-whatsapp-chatbot-with-python-flask-and-twilio\"\n  }), \"https://www.twilio.com/blog/build-a-whatsapp-chatbot-with-python-flask-and-twilio\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"What I built Hi, I have built an SMS chatbot using Twilio, which helps the user to track COVID-19 cases across different states of India…","timeToRead":2,"wordCount":{"words":540},"frontmatter":{"title":"Break the chain - SMS chatbot for awareness in times of COVID-19","tags":["twilio","python","flask","web scraping"],"date":"2020-04-06T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1597569978/Portfolio_Assets/break-chain.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/break-the-chain/","owner":"source","parent":"posts"}}},{"node":{"id":"cd46b8ee-41c2-51d6-81c8-e92483f34d8c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"break-the-chain\",\n  \"date\": \"2020-04-05T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"Web Scraping Chatbot\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598771675/Portfolio_Assets/Projects/Banner/Frame_8_nbn0ji.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"Built this project for the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.to/devteam/announcing-the-twilio-hackathon-on-dev-2lh8\"\n  }), \"Dev.to twilio hackathon\"), \".\\nIts a twilio Chatbot connected with flask rest api. The flask server periodically scrapes the covid-19 data\\nfrom the government website at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mohfw.gov.in/\"\n  }), \"mohfw.gov.in\"), \" to get the latest stats and makes this\\ndata accessible for chat bot with sqlite database. The scraping part was interesting, its done with BeautifulSoup,\\nyou can find it \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/break-the-chain/blob/master/app/cli.py\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"Check out at GitHub: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/break-the-chain\"\n  }), \"break-the-chain\"), \"\\nDetailed Blog : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://akshay-ashok.now.sh/posts/break-the-chain/\"\n  }), \"break-the-chain\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation Built this project for the  Dev.to twilio hackathon . \nIts a twilio Chatbot connected with flask rest api. The flask server…","timeToRead":1,"wordCount":{"words":70},"frontmatter":{"title":"break-the-chain","tags":null,"date":"2020-04-05T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"Web Scraping Chatbot","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598771675/Portfolio_Assets/Projects/Banner/Frame_8_nbn0ji.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/break-the-chain/","owner":"source","parent":"projects"}}},{"node":{"id":"ca327b85-9ef2-522f-8962-b8f2f27884bc","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"colab-cli\",\n  \"date\": \"2020-03-29T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"Sync colab notebooks locally\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_13_kbw6fb.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"While working with my udacity deep learning moocs I had to deal with jupyter notebooks a lot and I happen\\nto use Google Colab for the free GPU's. Now the thing is that if I had to commit the notebooks to GitHub\\nlike we do with our code or do it was not possible from the colab gui.\"), mdx(\"p\", null, \"To solve the issue I made this cli tool to sync colab notebooks locally. \"), mdx(\"p\", null, \"Before colab-cli it required lot of work to commit files to GitHub as mentioned \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@navan0/how-to-push-files-into-github-from-google-colab-379fd0077aa8\"\n  }), \"in this blog post.\"), \"\\nBut now with just one command, you can get notebooks from colab to local pc, like\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colab-cli pull-nb mynb.ipynb \")), mdx(\"p\", null, \"Then you can commit it the usual way.\"), mdx(\"p\", null, \"There are various other options and commands, \"), mdx(\"p\", null, \"check it out at GitHub : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Akshay090/colab-cli\"\n  }), \"colab-cli\")), mdx(\"p\", null, \"detailed blog post : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://akshay-ashok.now.sh/posts/colab-cli/\"\n  }), \"heres-how-i-made-a-cli-tool-to-work-with-google-colab-notebooks\")), mdx(\"p\", null, \"colab-cli was mentioned in these blog posts : \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://amitness.com/2020/06/google-colaboratory-tips/\"\n  }), \"google-colaboratory-tips\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://amitness.com/toolbox/\"\n  }), \"toolbox\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation While working with my udacity deep learning moocs I had to deal with jupyter notebooks a lot and I happen \nto use Google Colab…","timeToRead":1,"wordCount":{"words":141},"frontmatter":{"title":"colab-cli","tags":null,"date":"2020-03-29T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"Sync colab notebooks locally","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598771674/Portfolio_Assets/Projects/Banner/Frame_13_kbw6fb.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/colab-cli/","owner":"source","parent":"projects"}}},{"node":{"id":"ceaa02e5-0669-504b-950a-ab6af26a69ea","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to build formiQR - Event management with Google Forms and Cloud Function\",\n  \"tags\": [\"email\", \"Firebase\", \"cloud functions\"],\n  \"date\": \"2019-04-23T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1597561185/Portfolio_Assets/formiqr_suvqqh.jpg\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this post I would go through what is formiQR and how to build formiQR.\"), mdx(\"p\", null, \"First of all what is formiQR and what problem it solves ?\"), mdx(\"p\", null, \"formiQR aims to leverages google form with help of firebase cloud function to be a complete event management platform.\"), mdx(\"p\", null, \"Initially I developed formiQR to help out a friend with an event, named MakerFest Vadodara. They needed a system, in which a user fills in the google form and then receive a personalized QR code, which they can scan at the event to conform their presence and also get other statistical data like how many people are present in the event, what age group they are, gender, etc.\"), mdx(\"p\", null, \"Now,after successfully completing this project, I thought of organizing all the code and making a proper repo, as this might be helpful to someone.\"), mdx(\"p\", null, \"So the proper git repo of the end product is at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Club-DevBytes/formiQR\"\n  }), \"Club-DevBytes/formiQR\"), \" and this is the blog post explaining it step by step.\"), mdx(\"p\", null, \"I plan to break down this into 4 parts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sending data filled in google form to firebase and using triggers in google sheets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/posts/formiqr-part2-email-cloud-function\"\n  }), \"Sending personalized email from cloud function\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/posts/formiqr-part3-counter-cloud-function\"\n  }), \"A cloud function to implement a counter\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/posts/formiqr-part4-appQR-to-firebase\"\n  }), \"Android app to scan QR and update data in firebase and display it\"))), mdx(\"h1\", null, \"So lets begin with Part 1\"), mdx(\"h2\", null, \"Sending data filled in google form to firebase and using triggers in google sheets\"), mdx(\"p\", null, \"We need to send the data in the google sheet linked to our google form to Firebase, for this we would be using Google Apps Script, which is a scripting language for light-weight application development in the G Suite platform.\"), mdx(\"p\", null, \"To do that lets switch to the Tools > Script editor in the top bar\"), mdx(\"p\", null, \"Then you need to add the following code in the Code.gs\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"//Code.gs\\nfunction writeDataToFirebase() {\\n    var firebaseUrl = \\\"https://makerqr.firebaseio.com replace this with your own\\\";\\n    var secret = \\\"the firebase database secret here\\\";\\n    var base = FirebaseApp.getDatabaseByUrl(firebaseUrl, secret);\\n    var mySheet = SpreadsheetApp.openById(\\\"the id of your spreadsheet\\\");\\n    var dataSheet = mySheet.getSheets()[1];\\n    var lastRow = mySheet.getLastRow();\\n    var lastColumn = mySheet.getLastColumn();\\n    var data = mySheet.getSheetValues(1, 1, lastRow, lastColumn);\\n    var dataToImport = {};\\n    for (var i = 1; i < data.length; i++) {\\n        dataToImport[i] = {\\n            name: data[i][1],\\n            email: data[i][2],\\n            gender: data[i][3],\\n            age: data[i][4]\\n        };\\n    }\\n    base.setData(\\\"maker\\\", dataToImport);\\n}\\nfunction addNewData() {\\n    writeDataToFirebase();\\n}\\n\\n\")), mdx(\"p\", null, \"The important details which need to be added in above code are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"FirebaseUrl and database secret, we will get it in next part\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your spreadsheet ID, which can be found in the url of the spreadsheet, as \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.google.com/spreadsheets/d/your-spreadsheetID/edit\"\n  }), \"https://docs.google.com/spreadsheets/d/your-spreadsheetID/edit\"), \", you need to place this in the openById part of code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding the Firebase App Library to send the data to firebase, for this go to Resources > Libraries > paste MYeP8ZEEt1ylVDxS7uyg9plDOcoke7-2l in add library and add it. Select version 30 and you are done.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The dataToImport json object, contains the are the coloums in spread sheet which you really care, with the column header, you can select a particular column form it no as in data\", \"[i][1]\", \" and so on.\")), mdx(\"p\", null, \"Now lets create a firebase project, so lets go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://console.firebase.google.com\"\n  }), \"https://console.firebase.google.com\"), \" and add project with an appropriate name.\\nNow click Database in the side Nav bar, and scroll down to Realtime Database and click create database(for now select test mode).\"), mdx(\"p\", null, \"Now you can get your Firebase url form the page,\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1597561185/Portfolio_Assets/formiqr_suvqqh.jpg\",\n    \"alt\": \"firebase url image, if broken then inform me\"\n  }))), mdx(\"p\", null, \"Finally the last part, the database secret, for that\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"click on the settings/cog wheel icon next to your project name at the top of the new Firebase Console\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click Project settings\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click on the Service Accounts tab\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click on Database Secrets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hover over the non-displayed secret and click Show\")), mdx(\"p\", null, \"Paste FirebaseUrl and database secret in the appropriate place in the code.gs and save it.\"), mdx(\"p\", null, \"Try to run the addNewData function by selecting in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select function\"), \" and click the Run button beside it.\\nHave a look at firebase Realtime Database and all those data should be there.\"), mdx(\"h2\", null, \"Adding trigger to google sheets\"), mdx(\"p\", null, \"Now we need a method where this function should run automatically on form submit.\\nThat's where Triggers come handy, to set a trigger onSubmit follow the steps,\\nIn the Script Editor:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Choose Edit > Current project's triggers. You see a panel with the message No triggers set up. Click here to add one now.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click the link.\\nUnder Run, select the addNewData function which we want to be executed by the trigger. (That's onFormSubmit(), in this case.)\\nUnder Events, select From Spreadsheet.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"From the next drop-down list, select On form submit.\\nClick Save.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"From this point on, the function will be triggered whenever a form is submitted to the spreadsheet.\")), mdx(\"p\", null, \"If you plan to share your script, each recipient will need to repeat these steps.\"), mdx(\"p\", null, \"Finally this is complete, now your data would be added to firebase on form submission.\"), mdx(\"p\", null, \"You can even add a SYNC button in your google sheets to run addNewData function \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/a/6966272\"\n  }), \"refer this link\"), \". This might come handy when you manually enter data to sheets, or need to sync data to firebase, when you delete it there, during the testing phase.\"), mdx(\"p\", null, \"See you in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/posts/formiqr-part2-email-cloud-function\"\n  }), \"Part 2\"), \" where we will be discussing\\nSending personalized email from cloud function.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"In this post I would go through what is formiQR and how to build formiQR. First of all what is formiQR and what problem it solves ? formiQR…","timeToRead":3,"wordCount":{"words":778},"frontmatter":{"title":"How to build formiQR - Event management with Google Forms and Cloud Function","tags":["email","Firebase","cloud functions"],"date":"2019-04-23T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1597561185/Portfolio_Assets/formiqr_suvqqh.jpg","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/formiqr/","owner":"source","parent":"posts"}}},{"node":{"id":"3326a726-7f3f-56c6-96b1-ed12705c9fbf","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Sending personalized email with dynamic QR from cloud function\",\n  \"tags\": [\"email\", \"Firebase\", \"cloud functions\"],\n  \"date\": \"2019-04-22T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is the second part of the series named Building formiQR.\"), mdx(\"p\", null, \"By following the previous article, you may have a similar structure of Realtime Database,as\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1597567353/Portfolio_Assets/firebase1_llkvea.png\",\n    \"alt\": \"Firebase structure\"\n  }))), mdx(\"p\", null, \"Note: You would not be having the atEvent and count node, as we would be writing code for them in other sections of the blog series.\"), mdx(\"p\", null, \"So looking at our maker node or let say registered users, we have their name and email id. Now we need to set a cloud function, which would be able to get the name and email, at on create trigger on the node and send personalized email to them.\"), mdx(\"p\", null, \"A small brief about firebase cloud function, if you are new to it, Cloud Functions for Firebase lets you automatically run backend code in response to events triggered by Firebase features.\"), mdx(\"p\", null, \"Here is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://firebase.google.com/docs/functions/get-started\"\n  }), \"post to get started\"), \" with firebase cloud functions, you can follow it upto step 4 and then we need to add the following code to the index.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"//index.js\\nconst functions = require(\\\"firebase-functions\\\");\\nconst nodemailer = require(\\\"nodemailer\\\");\\nconst fs = require(\\\"fs\\\");\\nconst path = require(\\\"path\\\");\\n\\n// The Firebase Admin SDK to access the Firebase Realtime Database.\\nconst admin = require(\\\"firebase-admin\\\");\\nadmin.initializeApp();\\n\\nconst gmailEmail = functions.config().gmail.email;\\nconst gmailPassword = functions.config().gmail.password;\\nconst mailTransport = nodemailer.createTransport({\\n  service: \\\"gmail\\\",\\n  auth: {\\n    user: gmailEmail,\\n    pass: gmailPassword,\\n  },\\n});\\n\\nexports.mailFxn = functions.database\\n  .ref(\\\"/maker/{id}\\\")\\n  .onCreate((snapshot, context) => {\\n    // Grab the current value of what was written to the Realtime Database.\\n    const makers = snapshot.val();\\n    console.log(makers.name);\\n    console.log(makers.email);\\n\\n    const makerID = context.params.id;\\n\\n    //firebase functions:config:set gmail.email=myemailID@gmail.com gmail.password=Mypassword\\n    //To set email and password\\n\\n    //To view the set email and pass firebase functions:config:get\\n\\n    sendEmail(makers, makerID);\\n\\n    return null;\\n  });\\n\\nfunction sendEmail(makers, makerID) {\\n  //http://www.google.com/accounts/DisplayUnlockCaptcha\\n  //https://myaccount.google.com/lesssecureapps\\n  //This link is important to enable accesses to google account\\n\\n  var UNIQUE_NAME = makers.name;\\n  // var UNIQUE_ID = makerID;\\n\\n  var UNIQUE_QR = `https://chart.googleapis.com/chart?chs=150x150&cht=qr&chl=${\\n    +makerID + 1000\\n  }`;\\n\\n  var filePath = path.join(__dirname, \\\"templates/makerEmail.html\\\");\\n\\n  fs.readFile(filePath, { encoding: \\\"utf-8\\\" }, function (err, data) {\\n    data = data.toString();\\n    data = data.replace(/##UNIQUE_NAME/g, UNIQUE_NAME);\\n    // data = data.replace(/##UNIQUE_ID/g, UNIQUE_ID);\\n    data = data.replace(/##UNIQUE_QR/g, UNIQUE_QR);\\n\\n    var mailOptions = {\\n      from: '\\\"MakerEvent\\\" <noreply@firebase.com>', // sender address\\n      to: makers.email, // list of receivers\\n      subject: \\\"Thank You For Registration\\\", // Subject line\\n      html: data, // html body\\n    };\\n\\n    try {\\n      mailTransport.sendMail(mailOptions);\\n    } catch (error) {\\n      console.error(\\\"There was an error while sending the email:\\\", error);\\n\\n      // errorEmails = functions.database.ref(`/emailError/${makerID}`).set({\\n      //   email: makers.email\\n      // })\\n    }\\n\\n    return console.log(\\n      `Sending mail to ${makers.name} with stamp ${makers.stamp}`\\n    );\\n  });\\n}\\n\\n//To deploy firebase deploy --only functions:mailFxn\\n\")), mdx(\"p\", null, \"You can go through the code, its very straightforward to understand, and the important details are in the comment section.\"), mdx(\"p\", null, \"Before we proceed further, we need to make an email template, which we would be using to send personalized emails to our event attendees.\"), mdx(\"p\", null, \"To generate an awesome email template, you can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stripo.email\"\n  }), \"https://stripo.email\"), \" this is by far the best website I found to make email templates. PS: I am not sponsored by stripo, it's just that they are really awesome.\"), mdx(\"p\", null, \"After designing your email template, export it as HTML and add it under functions/templates/makerEmail.html\"), mdx(\"p\", null, \"Don't forget to add tags, which we would be replacing dynamically, like ##UNIQUE_NAME or ##UNIQUE_QR.\"), mdx(\"p\", null, \"This method of using data.replace(/##UNIQUE_NAME/g, \\\"MyNameHere\\\"); is the most easiest method I found to generate personalized emails.\"), mdx(\"p\", null, \"Finally we can deploy this cloud function, for that run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"firebase deploy --only functions:mailFxn\")), mdx(\"p\", null, \"Now when ever a node is created, the cloud function would automatically send them the personalized emails. Wait, how to send email to the ones already present in firebase realtime database,before we added this cloud function.\"), mdx(\"p\", null, \"For that delete the nodes for the one already present, before adding the cloud function and press the SYNC button in the google sheet which we added at the end of previous article. That would recreate the onCreate Trigger and the cloud function would do the work.\"), mdx(\"p\", null, \"So finally its over, see you in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/posts/formiqr-part3-counter-cloud-function\"\n  }), \"next post\"), \" where we will discuss how to add a counter cloud function to keep track of attendees count.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"This is the second part of the series named Building formiQR. By following the previous article, you may have a similar structure of…","timeToRead":2,"wordCount":{"words":417},"frontmatter":{"title":"Sending personalized email with dynamic QR from cloud function","tags":["email","Firebase","cloud functions"],"date":"2019-04-22T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":null,"embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/formiqr-part2-email-cloud-function/","owner":"source","parent":"posts"}}},{"node":{"id":"85e96545-1fe6-576d-b665-c8bb09b68923","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"A cloud function to implement a counter\",\n  \"tags\": [\"email\", \"Firebase\", \"cloud functions\"],\n  \"date\": \"2019-04-22T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To add the counter we need to append the following code in the index.js, which we created in Part-2 post, please refer it before proceeding.\"), mdx(\"p\", null, \"Code to implement the counter is as follows :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"exports.genderCountFxn = functions.database\\n  .ref(\\\"/atEvent/{date}/{id}\\\")\\n  .onCreate((snapshot, context) => {\\n    // Grab the current value of what was written to the Realtime Database.\\n    const Visitor = snapshot.val();\\n    console.log(\\\"Inside Visitor Fxn\\\");\\n    console.log(Visitor);\\n\\n    console.log(Visitor.name);\\n\\n    //---------------------------------------------------\\n    //Working gender counter\\n    const genderCountersRef = admin.database().ref(`count/${Visitor.gender}`);\\n\\n    return genderCountersRef.transaction((counter_value) => {\\n      return (counter_value || 0) + 1;\\n    });\\n  });\\n//To deploy firebase deploy --only functions:genderCountFxn\\n\\nexports.overallCountFxn = functions.database\\n  .ref(\\\"/atEvent/{date}/{id}\\\")\\n  .onCreate((snapshot, context) => {\\n    const Visitor = snapshot.val();\\n\\n    const overallCountersRef = admin.database().ref(`count/overAllTotal`);\\n\\n    return overallCountersRef.transaction((counter_value) => {\\n      return (counter_value || 0) + 1;\\n    });\\n  });\\n//To deploy firebase deploy --only functions:overallCountFxn\\n\")), mdx(\"p\", null, \"We would be creating the atEvent node in the next blog, where it would be generated when we scan the QR with the android app.\"), mdx(\"p\", null, \"To understand the path and the code above, have a look at the Realtime database.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1597569044/Portfolio_Assets/firebase2_f36m2o.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Understanding how to get this done took an effort, so if you don't get it they feel free to ask me in comments. This code is just of few lines, but it did it job perfectly to give me a bad time \\uD83D\\uDE30\"), mdx(\"p\", null, \"No lets us move to the next and the last part of this series \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/posts/formiqr-part4-appQR-to-firebase\"\n  }), \"here\"), \" to see how to implement the app to view firebase data and scan qr.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"To add the counter we need to append the following code in the index.js, which we created in Part-2 post, please refer it before proceeding…","timeToRead":1,"wordCount":{"words":144},"frontmatter":{"title":"A cloud function to implement a counter","tags":["email","Firebase","cloud functions"],"date":"2019-04-22T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":null,"embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/formiqr-part3-counter-cloud-function/","owner":"source","parent":"posts"}}},{"node":{"id":"d30a5829-6d22-5ec7-9211-68e7fa506252","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Android app to scan QR and update data in firebase and display it\",\n  \"tags\": [\"email\", \"Firebase\", \"cloud functions\"],\n  \"date\": \"2019-04-21T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Before we start, here are some pics of the UI of the app we are building, this may help you to understand what is going on.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Default(No Internet)\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Scanner\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Details Loaded\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), mdx(\"img\", _extends({\n    parentName: \"td\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1597569217/Portfolio_Assets/firebase-app-1_hhpv7m.png\",\n    \"alt\": null\n  }))), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), mdx(\"img\", _extends({\n    parentName: \"td\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1597569216/Portfolio_Assets/firebase-app-2_ofq9wp.png\",\n    \"alt\": null\n  }))), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), mdx(\"img\", _extends({\n    parentName: \"td\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1597569209/Portfolio_Assets/firebase-app-3_kpvyfa.png\",\n    \"alt\": null\n  })))))), mdx(\"p\", null, \"To implement the QR Scanner I used the zxing library, which is the best way to do it,as per me. \"), mdx(\"p\", null, \"The code to this is at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Club-DevBytes/formiQR\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Club-DevBytes/formiQR\"))), mdx(\"p\", null, \"You should have a look at the structure of Realtime Database, this may be helpful \"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1597569044/Portfolio_Assets/firebase2_f36m2o.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"If you are new to firebase and android, you can lookup how to connect them both, there is already more than enough content regarding this topic.\"), mdx(\"p\", null, \"If you need any help then feel free to ask.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Before we start, here are some pics of the UI of the app we are building, this may help you to understand what is going on. Default(No…","timeToRead":1,"wordCount":{"words":104},"frontmatter":{"title":"Android app to scan QR and update data in firebase and display it","tags":["email","Firebase","cloud functions"],"date":"2019-04-21T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":null,"embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/formiqr-part4-appQR-to-firebase/","owner":"source","parent":"posts"}}},{"node":{"id":"9b1f3bf9-0a97-5e6b-8f14-9081d985d8cb","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"touch-to-go\",\n  \"date\": \"2019-04-19T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"IOT device for biometric attendance system.\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598794264/Portfolio_Assets/Projects/Banner/Frame_14_k239ny.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Vimeo = makeShortcode(\"Vimeo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"This project was made in the finals of Gujarat Industrial Hackathon. \"), mdx(\"p\", null, \"Worked in team with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://linkedin.com/in/jainal-gosaliya-75baa714a/\"\n  }), \"Jainal\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.linkedin.com/in/adarsh-gupta-447329154/\"\n  }), \"Adarsh\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.linkedin.com/in/drontrivedi/\"\n  }), \"Dron\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.linkedin.com/in/siddharth-dayalwal/\"\n  }), \"Siddharth\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.linkedin.com/in/trushant-adeshara-34b109174/\"\n  }), \"Trushant\")), mdx(\"p\", null, \"We were given the problem statement of creating Biometric fingerprint based attendance system integrated with\\nMySql database which supports multiple checkin and checkout points.\"), mdx(\"p\", null, \"I made the dashboard website and worked along my team on the IOT device we developed.\"), mdx(\"p\", null, \"For the dashboard I used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/arwes/arwes\"\n  }), \"arwes\"), \", it's a really cool framework to build\\nfuturistic interfaces with React.\"), mdx(\"p\", null, \"The dashboard looked like this : \"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"img\", _extends({\n    parentName: \"th\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1598795076/Portfolio_Assets/touch-to-go-1.png\",\n    \"alt\": \"demo-image-1\"\n  }))), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"img\", _extends({\n    parentName: \"th\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/akshay090/image/upload/v1598795125/Portfolio_Assets/touch-to-go-2.png\",\n    \"alt\": \"demo-image-2\"\n  }))))), mdx(\"tbody\", {\n    parentName: \"table\"\n  })), mdx(\"p\", null, \"The IOT device is build with Raspberry pi 3b +, fingerprint sensor, speaker and lcd display.\"), mdx(\"p\", null, \"Integrating the fingerprint sensor and MySql was a real challenge.\"), mdx(\"p\", null, \"Check out the project at GitHub : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Club-DevBytes/Touch-to-Go\"\n  }), \"Touch-to-Go\")), mdx(\"p\", null, \"Here's the final demo video, it don't cover the dashboard part \\uD83D\\uDE22\"), mdx(\"h2\", null, \"\\uD83C\\uDFA5 Demo\"), mdx(Vimeo, {\n    vimeoId: \"453027987\",\n    mdxType: \"Vimeo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation This project was made in the finals of Gujarat Industrial Hackathon.  Worked in team with  Jainal ,  Adarsh , \n Dron ,  Siddharth…","timeToRead":1,"wordCount":{"words":127},"frontmatter":{"title":"touch-to-go","tags":null,"date":"2019-04-19T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"IOT device for biometric attendance system.","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598794264/Portfolio_Assets/Projects/Banner/Frame_14_k239ny.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/touch-to-go/","owner":"source","parent":"projects"}}},{"node":{"id":"4d47a99a-ec4c-575a-8ced-d1adb5210191","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"attendico\",\n  \"date\": \"2019-02-10T00:00:00.000Z\",\n  \"author\": \"Akshay Ashok\",\n  \"misc\": \"Face Recognition attendace and security.\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/akshay090/image/upload/v1598798156/Portfolio_Assets/Projects/Banner/Frame_15_r9u2wk.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar YouTube = makeShortcode(\"YouTube\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Motivation\"), mdx(\"p\", null, \"This was the winning project of the Hexa Hive Hackathon. \"), mdx(\"p\", null, \"I worked in team with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://linkedin.com/in/jainal-gosaliya-75baa714a/\"\n  }), \"Jainal\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.linkedin.com/in/adarsh-gupta-447329154/\"\n  }), \"Adarsh\"), \".\"), mdx(\"p\", null, \"In this project we developed a IOT device using  raspberry pi, web cam, ultra sonic sensor and buzzer.\"), mdx(\"p\", null, \"In this project our goal was to provide a smart solution to manage attendace using Facial Recognition and\\nalso provide a solution for security solutions to colleges.\"), mdx(\"p\", null, \"We have a React Js dashboard for Registration of student and another admin dashboard for viewing all the\\nattendance of students. In this admin dashboard we can also view the triggered security events of\\nunauthorised events.\"), mdx(\"p\", null, \"We also use twilio to send sms to students and parents about their attendance.\"), mdx(\"p\", null, \"Check out at GitHub: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Club-DevBytes/Attendico\"\n  }), \"action-echo\")), mdx(\"p\", null, \"Here's the demo video of attendico : \"), mdx(\"h2\", null, \"\\uD83C\\uDFA5 Demo\"), mdx(YouTube, {\n    youTubeId: \"TM9ID6TAKO4\",\n    mdxType: \"YouTube\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Motivation This was the winning project of the Hexa Hive Hackathon.  I worked in team with  Jainal  and  Adarsh . In this project we…","timeToRead":1,"wordCount":{"words":126},"frontmatter":{"title":"attendico","tags":null,"date":"2019-02-10T00:00:00.000Z","dateModified":null,"author":"Akshay Ashok","status":null,"isPrivate":null,"url":null,"misc":"Face Recognition attendace and security.","pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/akshay090/image/upload/v1598798156/Portfolio_Assets/Projects/Banner/Frame_15_r9u2wk.png","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/projects/attendico/","owner":"source","parent":"projects"}}}]}}}