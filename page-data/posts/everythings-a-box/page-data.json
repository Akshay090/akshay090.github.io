{"componentChunkName":"component---node-modules-pauliescanlon-gatsby-theme-terminal-src-layouts-source-layout-js","path":"/posts/everythings-a-box/","result":{"data":{"mdx":{"id":"25718e4f-4afd-5930-a944-6811c084af39","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Everything's a box\",\n  \"tags\": [\"React\", \"Theme UI\"],\n  \"date\": \"2020-07-06T00:00:00.000Z\",\n  \"author\": \"Paul Scanlon\",\n  \"featuredImageUrl\": \"https://res.cloudinary.com/practicaldev/image/fetch/s--WqMhdT4Q--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/mt7tbfe6sl0lkjwtwsm6.jpg\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Flex = makeShortcode(\"Flex\");\nvar Box = makeShortcode(\"Box\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this post i'm going to introduce one of the concepts you can use when developing web pages/apps using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://theme-ui.com/\"\n  }), \"Theme UI\")), mdx(\"p\", null, \"If you're not familiar with Theme UI take a moment to have a read of the docs... and if you're not familiar with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/dailyjs/what-is-actually-css-in-js-f2f529a2757\"\n  }), \"CSS-in-Js\"), \" perhaps have a read up on that first.\"), mdx(\"p\", null, \"I'm going to talk about one quite complicated but in my opinion unnecessary part of Theme UI and it's something that took me a while to work out since the docs don't really mention this in a clear and concise way.\"), mdx(\"p\", null, \"It's my hope that this post might clarify a couple of things and help lower the barrier to entry when using Theme UI. I won't go into detail about how the CSS properties link to the their respective scales or keys... that's a post for another time.\"), mdx(\"p\", null, \"In the docs you'll see a code snippet like this.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"/** @jsx jsx */\\nimport { jsx } from \\\"theme-ui\\\"\\n\\nexport default (props) => (\\n  <div\\n    sx={{\\n      fontWeight: \\\"bold\\\",\\n      fontSize: 4,\\n      color: \\\"primary\\\",\\n    }}\\n  >\\n    Hello\\n  </div>\\n)\\n\")), mdx(\"p\", null, \"When i first saw this i was like \\\"What the flip is @jsx\\\", and \\\"where's the import for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React\"), \"\\\" ... and then after a while i read on and started to understand what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \" pragma actually is.\"), mdx(\"p\", null, \"The TLDR version is as follows.\"), mdx(\"p\", null, \"When you include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/** @jsx jsx */\"), \" in your React component you don't need to import React. This because the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \" pragma kind of includes the functionality to transform JSX for us. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \" pragma also allows a new \\\"type\\\" of HTML attribute, it's called the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sx\"), \" prop which can be applied to any normal HTML element.\"), mdx(\"p\", null, \"With the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sx\"), \" prop you can now style you UI using Theme UI's super powers.\"), mdx(\"p\", null, \"If you'd like to know about more, have a read of this: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/blog/2019-08-02-what-is-jsx-pragma/\"\n  }), \"What is JSX Pragma\")), mdx(\"p\", null, \"No more naming of CSS classes, or importing global variables \\uD83E\\uDD22 and in no way will we need to worry about order of specificity \\uD83D\\uDE4C... nice ay!\"), mdx(\"p\", null, \"But...\"), mdx(\"p\", null, \"Importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \" and having to explain the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \" pragma is all a bit unnecessary so i'm proposing we try this another way.\"), mdx(\"p\", null, \"Instead of doing what the docs say, try this approach instead.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React from \\\"react\\\"\\nimport { Box } from \\\"theme-ui\\\"\\n\\nexport default (props) => (\\n  <Box\\n    sx={{\\n      fontWeight: \\\"bold\\\",\\n      fontSize: 4,\\n      color: \\\"primary\\\",\\n    }}\\n  >\\n    Hello\\n  </Box>\\n)\\n\")), mdx(\"p\", null, \"You can see from the above that we don't need to import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsx\"), \" pragma and instead we can import React as we normally would and then use one of the components that ships with Theme UI.... The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Box />\")), mdx(\"p\", null, \"The Box is technically just a div but if you inspect the below you'll see there's a few things Theme UI does for us which will save us time later.\"), mdx(Flex, {\n    sx: {\n      flexWrap: 'wrap'\n    },\n    mdxType: \"Flex\"\n  }, mdx(Box, {\n    sx: {\n      px: 2,\n      width: ['100%', '50%']\n    },\n    mdxType: \"Box\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript for Box \\uD83D\\uDC47\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<Box>I'm a Box</Box>\\n\")), mdx(Box, {\n    mdxType: \"Box\"\n  }, \"I'm a Box\")), mdx(Box, {\n    sx: {\n      px: 2,\n      width: ['100%', '50%']\n    },\n    mdxType: \"Box\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript for div \\uD83D\\uDC47\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<div>I'm a div</div>\\n\")), mdx(\"div\", null, \"I'm a div\"))), mdx(Flex, {\n    sx: {\n      flexWrap: 'wrap'\n    },\n    mdxType: \"Flex\"\n  }, mdx(Box, {\n    sx: {\n      px: 2,\n      width: ['100%', '50%']\n    },\n    mdxType: \"Box\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS for Box \\uD83D\\uDC47\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"display: block;\\nbox-sizing: border-box;\\nmargin: 0;\\nmin-width: 0;\\n\"))), mdx(Box, {\n    sx: {\n      px: 2,\n      width: ['100%', '50%']\n    },\n    mdxType: \"Box\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS for div \\uD83D\\uDC47\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"display: block;\\n\")))), mdx(\"p\", null, \"You can see from the above that the CSS for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Box />\"), \" includes some resets for us, eg. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"box-sizing\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"margin\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min-width\"), \" and whilst in the past we \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"could\"), \" have used a global CSS file that handles the resets, we don't want to use global CSS because this is where problems arise.\"), mdx(\"p\", null, \"Global styles and the dreaded \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!important\"), \" are escape hatches. These are work arounds we've developed over the years to compensate for some of the shortcomings of native CSS. But in the new world of CSS-in-Js these native shortcomings have been removed which allows us to spend more time focussing on actually building something.\"), mdx(\"p\", null, \"But wait, there's more, here's the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Flex />\"), \" component that ships with Theme UI\"), mdx(Flex, {\n    sx: {\n      flexWrap: 'wrap'\n    },\n    mdxType: \"Flex\"\n  }, mdx(Box, {\n    sx: {\n      px: 2,\n      width: ['100%', '50%']\n    },\n    mdxType: \"Box\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript for Flex \\uD83D\\uDC47\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<Flex>I'm a Flex</Flex>\\n\")), mdx(Flex, {\n    mdxType: \"Flex\"\n  }, \"I'm a Flex\")), mdx(Box, {\n    sx: {\n      px: 2,\n      width: ['100%', '50%']\n    },\n    mdxType: \"Box\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS for Flex \\uD83D\\uDC47\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"display: flex;\\nbox-sizing: border-box;\\nmargin: 0;\\nmin-width: 0;\\n\")))), mdx(\"p\", null, \"...and you can see from the CSS snippet that the defaults that come with this component save us the time of adding them ourselves. e.g \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Flex />\"), \" already has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: flex;\"), \" Cool ay! \\uD83D\\uDE0E\"), mdx(\"p\", null, \"One last thing. Theme UI also allows the Polymorphic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \" prop. Poly meaning \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"many\"), \", and morphic meaning \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"forms\"), \" so you can do things like this.\"), mdx(Flex, {\n    sx: {\n      flexWrap: 'wrap'\n    },\n    mdxType: \"Flex\"\n  }, mdx(Box, {\n    sx: {\n      px: 2,\n      width: ['100%', '50%']\n    },\n    mdxType: \"Box\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript for aside \\uD83D\\uDC47\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"<Box as=\\\"aside\\\">I'm an aside</Box>\\n\")), mdx(Box, {\n    as: \"aside\",\n    mdxType: \"Box\"\n  }, \"I'm an aside\")), mdx(Box, {\n    sx: {\n      px: 2,\n      width: ['100%', '50%']\n    },\n    mdxType: \"Box\"\n  }, mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS for aside \\uD83D\\uDC47\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"display: block;\\nbox-sizing: border-box;\\nmargin: 0;\\nmin-width: 0;\\n\")))), mdx(\"p\", null, \"You'll see if you inspect the \\\"I'm man aside\\\" element that the actual HTML element is in fact an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<aside />\"), \" and it still inherits all the resets from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Box />\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \" props works with all manner of HTML elements... even inputs \", mdx(Box, {\n    as: \"input\",\n    placeholder: \"I'm an input\",\n    mdxType: \"Box\"\n  })), mdx(\"p\", null, \"So now you know.\"), mdx(\"p\", null, \"Everything's a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Box />\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"In this post i'm going to introduce one of the concepts you can use when developing web pages/apps using  Theme UI If you're not familiar…","timeToRead":2,"wordCount":{"words":629},"frontmatter":{"title":"Everything's a box","tags":["React","Theme UI"],"date":"2020-07-06T00:00:00.000Z","dateModified":null,"author":"Paul Scanlon","status":null,"isPrivate":null,"url":null,"misc":null,"pinned":null,"featuredImage":null,"featuredImageUrl":"https://res.cloudinary.com/practicaldev/image/fetch/s--WqMhdT4Q--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/mt7tbfe6sl0lkjwtwsm6.jpg","embeddedImages":null,"embeddedImageUrls":null},"fields":{"slug":"/posts/everythings-a-box/","owner":"source","parent":"posts"}}},"pageContext":{"id":"25718e4f-4afd-5930-a944-6811c084af39","prev":{"frontmatter":{"title":"all-front-matter","status":null},"fields":{"slug":"/posts/all-frontmatter/"}},"next":{"frontmatter":{"title":"Gitify - Interact with Git from browser extension.","status":null},"fields":{"slug":"/posts/gitify/"}},"parent":"posts"}},"staticQueryHashes":["1095393795","1402550803","1469902088"]}